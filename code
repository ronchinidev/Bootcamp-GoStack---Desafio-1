// ============================================================================
// ROCKETSEAT Bootcamp GoStack
// Challenge 01: Project Manager
// ============================================================================
// Revision History
//
// Revision     Author                Date             Description
// v01          LUCIANO RONCHINI      30/JAN/2020      First Release
// ============================================================================
// Reference
//
// Bootcamp GoStack Module 1
// ============================================================================

// **************************** Declarations **********************************
const express = require('express');
const server = express();
server.use(express.json());
const projects = [];          // Database start without entries
server.listen(3000);

// ***************************** Middlewares **********************************
// Returns an error if the project id selected does not exist
function Checkprojectexistence(req, res, next) {
  const {id} = req.params;
  const project = projects.find(a => a.id == id);
  if (!project) {
    return res.status(400).json({error: `Project ${id} does not exist`});
  }
  return next();
}

// Number of requisition
function requisitioncount(req, res, next) {
  console.count("Requisitions");
  return next();
}
server.use(requisitioncount);

// ******************************* Routes *************************************
// Insert new project
server.post('/projects', (req, res) => {
  const {id, title} = req.body;
  const project = {
    id,
    title,
    task: []
  };
  projects.push(project);
  return res.json(project);
});

// View all projects
server.get('/projects', (req, res) =>{
  return res.json(projects);
});

// Edit title
server.put('/projects/:id', Checkprojectexistence, (req, res) => {
  const {id} = req.params;
  const {title} = req.body;
  const project = projects.find(a => a.id == id);
  project.title = title;
  return res.json(projects);
});

// Delete project
server.delete('/projects/:id', Checkprojectexistence, (req, res) => {
  const {id} = req.params;
  const index = projects.findIndex(a => a.id == id);
  projects.splice(index, 1);
  return res.json({message: `Project ${id} deleted`});
});

// Insert a task in project 
server.post('/projects/:id/tasks', Checkprojectexistence, (req, res) => {
  const {id} = req.params;
  const {title} = req.body;
  const project = projects.find(a => a.id == id);
  project.task.push(title);
  return res.json(projects);
});
